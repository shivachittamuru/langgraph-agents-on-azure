name: Simple CI - Agent evaluations (Dockerized)

on:
  push:
    branches: [ shiva-cicd-branch ]

jobs:
  build-and-evaluate:
    runs-on: ubuntu-latest
    env:
      # Azure / OpenAI environment variables - set these in repository secrets
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
      AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
      AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED: ${{ secrets.AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED }}
      AZURE_SDK_TRACING_IMPLEMENTATION: ${{ secrets.AZURE_SDK_TRACING_IMPLEMENTATION }}
      # Optional Postgres/checkpointer env vars
      PG_VECTOR_HOST: ${{ secrets.PG_VECTOR_HOST }}
      PG_VECTOR_USER: ${{ secrets.PG_VECTOR_USER }}
      PG_VECTOR_PASSWORD: ${{ secrets.PG_VECTOR_PASSWORD }}
      PGDATABASE: ${{ secrets.PGDATABASE }}

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t agent-backend ./backend

      - name: Run Docker container
        run: docker run -d --name agent-backend -p 80:80 \
             --env AZURE_OPENAI_ENDPOINT=$AZURE_OPENAI_ENDPOINT \
             --env AZURE_OPENAI_API_KEY=$AZURE_OPENAI_API_KEY \
             --env AZURE_OPENAI_DEPLOYMENT_NAME=$AZURE_OPENAI_DEPLOYMENT_NAME \
             --env AZURE_OPENAI_API_VERSION=$AZURE_OPENAI_API_VERSION \
             --env APPLICATIONINSIGHTS_CONNECTION_STRING=$APPLICATIONINSIGHTS_CONNECTION_STRING \
             --env AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED=$AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED \
             --env AZURE_SDK_TRACING_IMPLEMENTATION=$AZURE_SDK_TRACING_IMPLEMENTATION \
             --env PG_VECTOR_HOST=$PG_VECTOR_HOST \
             --env PG_VECTOR_USER=$PG_VECTOR_USER \
             --env PG_VECTOR_PASSWORD=$PG_VECTOR_PASSWORD \
             --env PGDATABASE=$PGDATABASE \
             agent-backend

      - name: Wait for container to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:80/health || curl -s http://localhost:80/docs; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend..."
            sleep 5
          done

      - name: Run evaluations
        working-directory: backend/evaluations
        run: python evaluation.py

      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        with:
          name: evaluation-results
          path: backend/evaluations/data/evaluation_output.json

      - name: Cleanup
        if: always()
        run: docker stop agent-backend && docker rm agent-backend
