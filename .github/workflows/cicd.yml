name: CI/CD - Agent Build and Deploy to Dev

on:
  push:
    branches: [ shiva-cicd-branch ]

jobs:
  # -----------------
  # CI: Build & Evaluate
  # -----------------
  build-and-evaluate:
    runs-on: ubuntu-latest
    env:
      # Azure / OpenAI environment variables
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
      AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
      AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED: ${{ secrets.AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED }}
      AZURE_SDK_TRACING_IMPLEMENTATION: ${{ secrets.AZURE_SDK_TRACING_IMPLEMENTATION }}
      # Optional Postgres/checkpointer env vars
      PG_VECTOR_HOST: ${{ secrets.PG_VECTOR_HOST }}
      PG_VECTOR_USER: ${{ secrets.PG_VECTOR_USER }}
      PG_VECTOR_PASSWORD: ${{ secrets.PG_VECTOR_PASSWORD }}
      PGDATABASE: ${{ secrets.PGDATABASE }}

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t chinook-backend ./backend

      - name: Run Docker container
        run: |
          docker run -d --name chinook-backend -p 80:80 \
            --env "AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}" \
            --env "AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}" \
            --env "AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}" \
            --env "AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}" \
            --env "APPLICATIONINSIGHTS_CONNECTION_STRING=${APPLICATIONINSIGHTS_CONNECTION_STRING}" \
            --env "AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED=${AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED}" \
            --env "AZURE_SDK_TRACING_IMPLEMENTATION=${AZURE_SDK_TRACING_IMPLEMENTATION}" \
            --env "PG_VECTOR_HOST=${PG_VECTOR_HOST}" \
            --env "PG_VECTOR_USER=${PG_VECTOR_USER}" \
            --env "PG_VECTOR_PASSWORD=${PG_VECTOR_PASSWORD}" \
            --env "PGDATABASE=${PGDATABASE}" \
            chinook-backend:latest

      - name: Wait for container to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:80/health || curl -s http://localhost:80/docs; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend..."
            sleep 5
          done

      - name: Run evaluations
        run: docker exec -w /app/evaluations chinook-backend python evaluation.py

      - name: Upload evaluation results
        uses: actions/upload-artifact@v4
        with:
          name: evaluation-results
          path: backend/evaluations/data/evaluation_output.json

      - name: Cleanup
        if: always()
        run: |
          docker stop chinook-backend 2>/dev/null || true
          docker rm chinook-backend 2>/dev/null || true

  # -----------------
  # CD: Deploy to Azure App Service (Dev)
  # -----------------
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-evaluate   # wait for CI to pass
    permissions:
      id-token: write   # required for OIDC
      contents: read    # required for actions/checkout
    steps:
      - uses: actions/checkout@v4

      # Login to Azure
      - name: Azure login
        uses: azure/login@v1
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}       # SP Application ID
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}       # Directory/Tenant ID
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # store service principal JSON here

      # Login to ACR
      - name: Azure CLI - ACR Login
        uses: azure/cli@v2
        with:
          inlineScript: |
            az acr login --name ${{ secrets.ACR_NAME }}

      # Build, Tag, and Push Docker image
      - name: Build and Push Docker image to ACR
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/chinook-backend:latest ./backend
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/chinook-backend:latest

      # Deploy to Azure Web App
      - name: Deploy Backend to Azure Web App
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config container set \
              --name ${{ secrets.BACKEND_WEBAPP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --docker-custom-image-name ${{ secrets.ACR_NAME }}.azurecr.io/chinook-backend:latest \
              --docker-registry-server-url https://${{ secrets.ACR_NAME }}.azurecr.io \
              --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
              --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

            az webapp restart \
              --name ${{ secrets.BACKEND_WEBAPP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }}
